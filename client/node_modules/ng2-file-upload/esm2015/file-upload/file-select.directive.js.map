{"version":3,"file":"file-select.directive.js","sourceRoot":"","sources":["../../../../../libs/ng2-file-upload/file-upload/file-select.directive.ts"],"names":[],"mappings":"AAAA,OAAO,EAAE,SAAS,EAAE,YAAY,EAAE,UAAU,EAAE,KAAK,EAAE,YAAY,EAAE,MAAM,EAAE,MAAM,eAAe,CAAC;AAEjG,OAAO,EAAE,YAAY,EAAuB,MAAM,uBAAuB,CAAC;AAG1E,MAAM,OAAO,mBAAmB;IAO9B,YAAY,OAAmB;QAL/B,+DAA+D;QACrD,mBAAc,GAAyB,IAAI,YAAY,EAAU,CAAC;QAK1E,IAAI,CAAC,OAAO,GAAG,OAAO,CAAC;IACzB,CAAC;IAED,UAAU;;QACR,aAAO,IAAI,CAAC,QAAQ,0CAAE,OAAO,CAAC;IAChC,CAAC;IAED,UAAU;QACR,OAAO,EAAE,CAAC;IACZ,CAAC;IAED,qBAAqB;QACnB,OAAO,CAAC,CAAC,IAAI,CAAC,OAAO,CAAC,aAAa,CAAC,UAAU,CAAC,QAAQ,CAAC;IAC1D,CAAC;IAGD,QAAQ;;QACN,MAAM,KAAK,GAAG,IAAI,CAAC,OAAO,CAAC,aAAa,CAAC,KAAK,CAAC;QAC/C,MAAM,OAAO,GAAG,IAAI,CAAC,UAAU,EAAE,CAAC;QAClC,MAAM,OAAO,GAAG,IAAI,CAAC,UAAU,EAAE,CAAC;QAClC,MAAA,IAAI,CAAC,QAAQ,0CAAE,UAAU,CAAC,KAAK,EAAE,OAAO,EAAE,OAAO,EAAE;QAEnD,IAAI,CAAC,cAAc,CAAC,IAAI,CAAC,KAAK,CAAC,CAAC;QAChC,IAAI,IAAI,CAAC,qBAAqB,EAAE,EAAE;YAChC,IAAI,CAAC,OAAO,CAAC,aAAa,CAAC,KAAK,GAAG,EAAE,CAAC;SACvC;IACH,CAAC;;;YAnCF,SAAS,SAAC,EAAE,QAAQ,EAAE,iBAAiB,EAAE;;;YAJR,UAAU;;;uBAMzC,KAAK;6BAEL,MAAM;uBAoBN,YAAY,SAAC,QAAQ","sourcesContent":["import { Directive, EventEmitter, ElementRef, Input, HostListener, Output } from '@angular/core';\n\nimport { FileUploader, FileUploaderOptions } from './file-uploader.class';\n\n@Directive({ selector: '[ng2FileSelect]' })\nexport class FileSelectDirective {\n  @Input() uploader?: FileUploader;\n  // eslint-disable-next-line @angular-eslint/no-output-on-prefix\n  @Output() onFileSelected: EventEmitter<File[]> = new EventEmitter<File[]>();\n\n  protected element: ElementRef;\n\n  constructor(element: ElementRef) {\n    this.element = element;\n  }\n\n  getOptions(): FileUploaderOptions | undefined {\n    return this.uploader?.options;\n  }\n\n  getFilters(): string {\n    return '';\n  }\n\n  isEmptyAfterSelection(): boolean {\n    return !!this.element.nativeElement.attributes.multiple;\n  }\n\n  @HostListener('change')\n  onChange(): void {\n    const files = this.element.nativeElement.files;\n    const options = this.getOptions();\n    const filters = this.getFilters();\n    this.uploader?.addToQueue(files, options, filters);\n\n    this.onFileSelected.emit(files);\n    if (this.isEmptyAfterSelection()) {\n      this.element.nativeElement.value = '';\n    }\n  }\n}\n"]}